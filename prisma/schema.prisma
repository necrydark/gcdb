// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  OWNER
}

enum ProfileColour {
  RED
  BLUE
  GREEN
  YELLOW
  PURPLE
  ORANGE
  PINK
  CYAN
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String
  emailVerified    Boolean   @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  twoFactorEnabled Boolean   @default(false)
  Session          Session[]
  username         String?   @unique
  Account          Account[]
  Favourites            Favourite[]
  bio                   String?
  role                  UserRole               @default(USER)
  profileColour         ProfileColour          @default(PURPLE)
  boxCC                 String?
  ingameRank            String?
  Comments              Comments[]

   @@unique([email])
  @@map("user")
}
model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}



model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@map("account")
}


model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

enum GameEvent {
  None
  Valentine
  Summer
  Christmas
}

enum Genders {
  Male
  Female
  Unknown
}

model Character {
  id                 String              @id
  name               String?
  tag                String?             @unique
  jpName             String
  jpTag              String
  slug               String?             @unique
  game               Game                @default(Base)
  imageUrl           String
  Crossover          Crossovers          @default(NotCrossover)
  race               Race                @default(Human)
  attribute          Attribute           @default(HP)
  rarity             Rarity              @default(SSR)
  event              GameEvent           @default(None)
  stats              Stats[]
  gender             Genders             @default(Male)
  bloodType          String?
  age                String?
  birthday           String?
  height             String?
  weight             String?
  location           String
  CV                 String?
  gift               Gift[]
  food               Food[]
  passiveName        String
  passiveImageUrl    String
  passiveJpName      String
  passiveDescription String
  passiveCCNeeded    String?
  releaseDate        DateTime
  skills             Skill[]
  associations       Association[]
  associationsWith   AssociationWith[]
  holyRelic          HolyRelic?          @relation(fields: [holyRelicId], references: [id])
  holyRelicId        String?
  ultimate           CharacterUltimate[]
  Favourite          Favourite[]
  Comments           Comments[]

  @@index([name])
  @@index([jpName])
  @@index([game])
  @@index([rarity])
}

enum StatLevel {
  LEVEL_1
  LEVEL_100
  SUPER_AWAKENING
}

model Stats {
  id             String     @id @default(cuid())
  level          StatLevel
  combatClass    Int
  attack         Int
  defense        Int
  hp             Int
   pierceRate     Decimal    @db.Decimal(5, 2)
  resistance     Decimal    @db.Decimal(5, 2)
  regeneration   Decimal    @db.Decimal(5, 2)
  critChance     Decimal    @db.Decimal(5, 2)
  critDamage     Decimal    @db.Decimal(5, 2)
  critResistance Decimal    @db.Decimal(5, 2)
  critDefense    Decimal    @db.Decimal(5, 2)
  recoveryRate   Decimal    @db.Decimal(5, 2)
  lifesteal      Decimal    @db.Decimal(5, 2)
  Character      Character? @relation(fields: [characterId], references: [id])
  characterId    String?
}

model AssociationWith {
  id          String     @id @default(cuid())
  imageUrl    String
  tag         String
  slug        String
  bonus       String
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String?
}

model Association {
  id          String    @id @default(cuid())
  slug        String
  imageUrl    String
  tag         String
  bonus       String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String
}

enum Game {
  Base
  KOF
  Tensura
  AOT
  StrangerThings
  ReZero
  ShieldHero
  Mushoku
  Mave
  Overlord
  TOG
}

enum Attribute {
  Dark
  HP
  Light
  Speed
  Strength
}

enum Crossovers {
  NotCrossover
  Crossover
}

model Ingredient {
  id       String   @id @default(cuid())
  name     String
  imageUrl String
  location String[]
  food     Food?    @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId   String
}

model Meal {
  id       String @id @default(cuid())
  name     String
  imageUrl String
  food     Food?
  foodId   String
}

model Food {
  id          String       @id @default(cuid())
  effect      String?
  meal        Meal         @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId      String       @unique
  ingredients Ingredient[]
  Character   Character?   @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String?
}

model Gift {
  id          String     @id @default(cuid())
  name        String
  description String
  imageUrl    String
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String?
}

model Material {
  id         String       @id @default(cuid())
  name       String
  imageUrl   String
  location   String?
  holyRelics HolyRelic[]  @relation("HolyRelicMaterials")
}

model HolyRelic {
  id        String       @id @default(cuid())
  name      String
  imageUrl  String
  effect    String
  materials Material[]   @relation("HolyRelicMaterials")

  attack     String
  defense    String
  hp         String
  characters Character[]
  beast      Beast       @default(Hraesvelgr)
}


enum Beast {
  Hraesvelgr
  Eikthyrnir
  SkollAndHati
  Nidhoggr
  Ratatoskr
  Collab
}

enum Race {
  Demon
  Fairy
  Giant
  Goddess
  Human
  HumanGiant
  Unknown
}

enum Rarity {
  LR
  R
  SR
  SSR
  UR
}

model CharacterUltimate {
  id          String     @id @default(cuid())
  name        String
  jpName      String
  imageUrl    String
  description String
  extraInfo   String[]
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String?
}

model Skill {
  id          String      @id @default(uuid())
  name        String
  jpName      String
  imageUrl    String
  character   Character   @relation(fields: [characterId], references: [id])
  characterId String
  skillRanks  SkillRank[]
}

model SkillRank {
  id          String @id @default(uuid())
  rank        Int
  description String
  type        String
  skill       Skill  @relation(fields: [skillId], references: [id])
  skillId     String
}

model Gear {
  id         String @id @default(cuid())
  name       String
  imageUrl   String
  gearType   String
  gearEffect String
}

model Favourite {
  id          String     @id @default(cuid())
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String?
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  createdAt   DateTime   @default(now())
}

model Comments {
  id          String    @id @default(cuid())
  comment     String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())

  @@map("comments")
}
