// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  COOWNER
  OWNER
}

enum ProfileColour {
  RED
  BLUE
  GREEN
  YELLOW
  PURPLE
  ORANGE
  PINK
  CYAN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String
  emailVerified         Boolean?               @default(false)
  bio                   String?
  password              String
  image                 String?
  createdAt             DateTime
  updatedAt             DateTime
  username              String                 @unique
  displayUsername       String?                @unique
  boxCC                 String?
  ingameRank            String?
  sessions              Session[]
  accounts              Account[]
  role                  UserRole               @default(USER)
  profileColour         ProfileColour          @default(PURPLE)
  Comments              Comments[]
  Collection             Collection[]
  isTwoFactorEnabled    Boolean?               @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  stripeCustomerId String? @unique @map("stripe_customer_id")
  stripeSubscriptionId String? @unique @map("stripe_subscription_id")
  stripePriceId String?
  stripeCurrentEndPeriod DateTime?
  subscriptionStatus String?

  @@unique([email])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum GameEvent {
  None
  Valentine
  Summer
  Christmas
}

enum Genders {
  Male
  Female
  Unknown
}

model Character {
  id                 String              @id @default(cuid())
  name               String?
  tag                String?             @unique
  jpName             String
  jpTag              String
  slug               String?             @unique
  game               Game                @default(Base)
  imageUrl           String
  Crossover          Crossovers          @default(NotCrossover)
  race               Race                @default(Human)
  attribute          Attribute           @default(HP)
  rarity             Rarity              @default(SSR)
  event              GameEvent           @default(None)
  stats              Stats[]
  gender             Genders             @default(Male)
  bloodType          String?
  age                String?
  birthday           String?
  height             String?
  weight             String?
  location           String
  CV                 String?
  gift               Gift[] @relation("CharacterGifts")
  food               Food[]              @relation("CharactersFood")
  passiveName        String
  passiveImageUrl    String
  passiveJpName      String
  passiveDescription String
  passiveCCNeeded    String?
  releaseDate        DateTime
  skills             Skill[]
  associations       Association[]
  associationsWith   AssociationWith[]
  holyRelic          HolyRelic?          @relation(fields: [holyRelicId], references: [id])
  holyRelicId        String?
  ultimate           CharacterUltimate?
  Collection          Collection[]
  Comments           Comments[]

  @@index([name])
  @@index([jpName])
  @@index([game])
  @@index([rarity])
}

enum StatLevel {
  LEVEL_1
  LEVEL_100
  SUPER_AWAKENING
}

model Stats {
  id             String     @id @default(cuid())
  level          StatLevel
  combatClass    Int
  attack         Int
  defense        Int
  hp             Int
  pierceRate     Int   
  resistance     Int   
  regeneration   Int   
  critChance     Int   
  critDamage     Int   
  critResistance Int   
  critDefense    Int   
  recoveryRate   Int   
  lifesteal      Int   
  Character      Character? @relation(fields: [characterId], references: [id])
  characterId    String?
}

model AssociationWith {
  id          String     @id @default(cuid())
  imageUrl    String
  tag         String
  slug        String
  bonus       String
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String?
}

model Association {
  id          String    @id @default(cuid())
  slug        String
  imageUrl    String
  tag         String
  bonus       String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String
}

enum Game {
  Base
  KOF
  Tensura
  AOT
  StrangerThings
  ReZero
  ShieldHero
  Mushoku
  Mave
  Overlord
  TOG
}

enum Attribute {
  Dark
  HP
  Light
  Speed
  Strength
}

enum Crossovers {
  NotCrossover
  Crossover
}

enum Towns {
  Vanya
  Dalmally
  PostTownTala
  Vaziel
  OrdanVillage
  LionesCastle
}

model Ingredient {
  id       String @id @default(cuid())
  name     String
  imageUrl String?
  location String?
  foods    Food[] @relation("FoodIngredients")
}

model Food {
  id          String       @id @default(cuid())
  name        String
  imageUrl    String
  effect      String?
  location    Towns        @default(Vanya)
  ingredients Ingredient[] @relation("FoodIngredients")
  Character   Character[]  @relation("CharactersFood")
}

model Gift {
  id          String     @id @default(cuid())
  name        String
  description String
  imageUrl    String
  Character   Character[]  @relation("CharacterGifts")

}

model Material {
  id         String      @id @default(cuid())
  name       String
  imageUrl   String
  location   String?
  holyRelics HolyRelic[] @relation("HolyRelicMaterials")
}

model HolyRelic {
  id          String     @id @default(cuid())
  name        String
  imageUrl    String
  effect      String
  releaseDate DateTime
  materials   Material[] @relation("HolyRelicMaterials")
  Collection             Collection[]


  attack     String
  defense    String
  hp         String
  characters Character[]
  beast      Beast       @default(Hraesvelgr)
}

enum Beast {
  Hraesvelgr
  Eikthyrnir
  SkollAndHati
  Nidhoggr
  Ratatoskr
  Collab
}

enum Race {
  Demon
  Fairy
  Giant
  Goddess
  Human
  HumanGiant
  Unknown
}

enum Rarity {
  LR
  R
  SR
  SSR
  UR
}

model CharacterUltimate {
  id          String     @id @default(cuid())
  name        String
  jpName      String
  imageUrl    String
  description String
  extraInfo   String
character Character? @relation(fields: [characterId], references: [id])
  characterId String? @unique
}

model Skill {
  id          String      @id @default(uuid())
  name        String
  jpName      String
  imageUrl    String
  character   Character   @relation(fields: [characterId], references: [id])
  characterId String
  skillRanks  SkillRank[]
}

model SkillRank {
  id          String @id @default(uuid())
  rank        Int
  description String
  type        String
  skill       Skill  @relation(fields: [skillId], references: [id])
  skillId     String
}

model Gear {
  id         String @id @default(cuid())
  name       String
  imageUrl   String
  gearType   String
  gearEffect String
}

model Collection {
  id          String     @id @default(cuid())
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String?
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  relic HolyRelic? @relation(fields: [relicId], references: [id], onDelete: Cascade)
  relicId String?
  createdAt   DateTime   @default(now())
  @@unique([userId, characterId])
  @@unique([userId, relicId])
  @@map("Collection")
}

model Comments {
  id          String    @id @default(cuid())
  comment     String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())

  @@map("comments")
}

