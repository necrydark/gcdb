// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  COOWNER
  OWNER
}

model User {
  id                     String                 @id @default(cuid())
  name                   String
  email                  String
  emailVerified          Boolean?               @default(false)
  bio                    String?
  password               String
  image                  String?
  createdAt              DateTime
  updatedAt              DateTime
  username               String                 @unique
  displayUsername        String?                @unique
  boxCC                  String?
  ingameRank             String?
  sessions               Session[]
  accounts               Account[]
  role                   UserRole               @default(USER)
  Comments               Comment[]
  collection             Collection[]
  isTwoFactorEnabled     Boolean?               @default(false)
  twoFactorConfirmation  TwoFactorConfirmation?
  stripeCustomerId       String?                @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?                @unique @map("stripe_subscription_id")
  stripePriceId          String?
  stripeCurrentEndPeriod DateTime?
  subscriptionStatus     String?
  userProgress           UserAchievement[]

  @@unique([email])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

//Character Enums
enum GameEvent {
  None
  Valentine
  Summer
  Christmas
}

enum Gender {
  Male
  Female
  Unknown
}

enum StatLevel {
  LEVEL_1
  LEVEL_100
  TRUE_AWAKENING
}

enum Game {
  Base
  KOF
  Tensura
  AOT
  StrangerThings
  ReZero
  ShieldHero
  Mushoku
  Mave
  Overlord
  TOG
}

enum Attribute {
  Dark
  HP
  Light
  Speed
  Strength
}

enum CrossoverType {
  NotCrossover
  Crossover
}

enum Race {
  Demon
  Fairy
  Giant
  Goddess
  Human
  Unknown
}

enum Rarity {
  LR
  R
  SR
  SSR
  UR
}

enum BonusType {
  ATTACK_FLAT
  ATTACK_PERCENTAGE
  DEFENSE_FLAT
  DEFENSE_PERCENTAGE
  HP_FLAT
  HP_PERCENTAGE
  PIERCE_RATE_FLAT
  PIERCE_RATE_PERCENTAGE
  RESISTANCE_FLAT
  RESISTANCE_PERCENTAGE
  REGENERATION_FLAT
  REGENERATION_PERCENTAGE
  CRIT_CHANCE_FLAT
  CRIT_CHANCE_PERCENTAGE
  CRIT_DAMAGE_FLAT
  CRIT_DAMAGE_PERCENTAGE
  CRIT_RESISTANCE_FLAT
  CRIT_RESISTANCE_PERCENTAGE
  CRIT_DEFENSE_FLAT
  CRIT_DEFENSE_PERCENTAGE
  RECOVERY_RATE_FLAT
  RECOVERY_RATE_PERCENTAGE
  LIFESTEAL_FLAT
  LIFESTEAL_PERCENTAGE
}

enum FriendshipRewardType {
  HERO_ARTWORK
  VOICE_LINE
  DIAMOND
  HERO_MOTION
  HEAD_COSMETIC
}

enum UniqueDisplayInfo {
  Battle_Active
  Subslot_Active
  PVP_Only
  PVP_Outside
  Death_Match_Only
  Death_Match_Outside
  All_Content
  Demonic_Beast_Only
  Demonic_Beast_Outside
}

//Character Model
model Character {
  id          String        @id @default(cuid())
  name        String?
  tag         String?       @unique
  jpName      String
  jpTag       String
  slug        String?       @unique
  race        Race[]        @default([Human])
  game        Game          @default(Base)
  imageUrl    String
  Crossover   CrossoverType @default(NotCrossover)
  attribute   Attribute     @default(HP)
  rarity      Rarity        @default(SSR)
  event       GameEvent     @default(None)
  gender      Gender        @default(Male)
  bloodType   String?
  age         String?
  birthday    String?
  height      String?
  weight      String?
  location    String
  cv          String?
  releaseDate DateTime

  //Relations
  stats  Stat[]
  gift   Gift[]  @relation("CharacterGifts")
  food   Food[]  @relation("CharactersFood")
  skills Skill[]

  //Associations
  associationsAsMain       CharacterAssociation[] @relation("MainCharacterAssociations")
  associationsAsAssociated CharacterAssociation[] @relation("AssociatedCharacterAssociations")

  //Relic
  holyRelic        HolyRelic?                 @relation(fields: [holyRelicId], references: [id])
  holyRelicId      String?                    @unique
  ultimate         CharacterUltimate?
  combinedUltimate CombinedCharacterUltimate?

  //Other Relationships
  collection Collection[]
  comments   Comment[]

  passiveSkill               PassiveSkill?               @relation(fields: [passiveSkillId], references: [id])
  passiveSkillId             String?                     @unique // Unique if a character has only one main passive
  unity                      Unity?                      @relation(fields: [unityId], references: [id])
  unityId                    String?                     @unique
  talent                     Talent?                     @relation(fields: [talentId], references: [id])
  talentId                   String?                     @unique
  grace                      Grace?                      @relation(fields: [graceId], references: [id])
  graceId                    String?                     @unique
  characterFriendshipRewards CharacterFriendshipReward[]

  @@index([name])
  @@index([jpName])
  @@index([game])
  @@index([rarity])
  @@map("characters")
}

model Stat {
  id             String     @id @default(cuid())
  level          StatLevel
  combatClass    Int
  attack         Int
  defense        Int
  hp             Int
  pierceRate     Int
  resistance     Int
  regeneration   Int
  critChance     Int
  critDamage     Int
  critResistance Int
  critDefense    Int
  recoveryRate   Int
  lifesteal      Int
  Character      Character? @relation(fields: [characterId], references: [id])
  characterId    String?
}

model PassiveSkill {
  id            String              @id @default(cuid())
  name          String
  imageUrl      String
  jpName        String
  description   String
  ccNeeded      String?
  character     Character? // Optional: If a PassiveSkill can only belong to one character
  characterId   String?             @unique // Optional: If a PassiveSkill can only belong to one character
  uniqueDisplay UniqueDisplayInfo[] @default([Battle_Active])

  @@map("passive_skills")
}

model Unity {
  id            String              @id @default(cuid())
  name          String
  imageUrl      String
  jpName        String
  description   String
  character     Character? // Optional: If a UnityForm can only belong to one character
  characterId   String?             @unique // Optional: If a UnityForm can only belong to one character
  uniqueDisplay UniqueDisplayInfo[] @default([Battle_Active])

  @@map("unity")
}

model Talent {
  id            String              @id @default(cuid())
  name          String
  imageUrl      String
  jpName        String
  description   String
  character     Character? // Optional: If a Talent can only belong to one character
  characterId   String?             @unique // Optional: If a Talent can only belong to one character
  uniqueDisplay UniqueDisplayInfo[] @default([Battle_Active])

  @@map("talents")
}

model Grace {
  id            String              @id @default(cuid())
  name          String
  imageUrl      String
  jpName        String
  description   String
  character     Character? // Optional: If a Talent can only belong to one character
  characterId   String?             @unique // Optional: If a Talent can only belong to one character
  uniqueDisplay UniqueDisplayInfo[] @default([Battle_Active])

  @@map("grace")
}

model CharacterAssociation {
  id String @id @default(cuid())

  // The character for whom the bonus applies (e.g., "Merlin" from your example)
  mainCharacter   Character @relation("MainCharacterAssociations", fields: [mainCharacterId], references: [id], onDelete: Cascade)
  mainCharacterId String

  // The character providing the bonus (e.g., "Ban" from your example)
  associatedCharacter   Character @relation("AssociatedCharacterAssociations", fields: [associatedCharacterId], references: [id], onDelete: Cascade)
  associatedCharacterId String

  bonusType  BonusType
  bonusValue Float
  bonusUnit  String?

  @@unique([mainCharacterId, associatedCharacterId])
  @@map("character_associations")
}

enum Towns {
  Vanya
  Dalmally
  PostTownTala
  Vaziel
  OrdanVillage
  LionesCastle
}

model Ingredient {
  id       String  @id @default(cuid())
  name     String
  imageUrl String?
  location String?
  foods    Food[]  @relation("FoodIngredients")
}

model Food {
  id            String       @id @default(cuid())
  name          String
  imageUrl      String
  effect        String?
  affinityValue Int          @default(100)
  location      Towns        @default(Vanya)
  ingredients   Ingredient[] @relation("FoodIngredients")
  Character     Character[]  @relation("CharactersFood")
}

model Gift {
  id          String      @id @default(cuid())
  name        String
  description String
  imageUrl    String
  Character   Character[] @relation("CharacterGifts")
}

model Material {
  id         String      @id @default(cuid())
  name       String
  imageUrl   String
  location   String?
  holyRelics HolyRelic[] @relation("HolyRelicMaterials")
}

model RelicEnhanceMaterial {
  id         String      @id @default(cuid())
  name       String
  imageUrl   String
  location   String?
  holyRelics HolyRelic[] @relation("HolyRelicEnhanceMaterials")
}

model HolyRelic {
  id               String                 @id @default(cuid())
  name             String
  imageUrl         String
  effect           String
  releaseDate      DateTime
  collection       Collection[]
  materials        Material[]             @relation("HolyRelicMaterials")
  enhanceMaterials RelicEnhanceMaterial[] @relation("HolyRelicEnhanceMaterials")
  attack           String
  defense          String
  hp               String
  enhancable       Boolean?               @default(false)
  enhanceAttack    String                 @default("0")
  enhanceDefense   String                 @default("0")
  enhanceHp        String                 @default("0")

  characters Character[]
  beast      Beast       @default(Hraesvelgr)

  @@map("holy_relics")
}

enum Beast {
  Hraesvelgr
  Eikthyrnir
  SkollAndHati
  Nidhoggr
  Ratatoskr
  Collab
}

model CharacterUltimate {
  id          String @id @default(cuid())
  name        String
  jpName      String
  imageUrl    String
  description String
  extraInfo   String

  character   Character? @relation(fields: [characterId], references: [id])
  characterId String?    @unique
}

model CombinedCharacterUltimate {
  id          String @id @default(cuid())
  name        String
  jpName      String
  imageUrl    String
  description String
  extraInfo   String

  character   Character? @relation(fields: [characterId], references: [id])
  characterId String?    @unique
}

model Skill {
  id          String      @id @default(uuid())
  name        String
  jpName      String
  imageUrl    String
  character   Character   @relation(fields: [characterId], references: [id])
  characterId String
  skillRanks  SkillRank[]
}

model SkillRank {
  id          String @id @default(uuid())
  rank        Int
  description String
  type        String
  skill       Skill  @relation(fields: [skillId], references: [id])
  skillId     String
}

model Gear {
  id         String @id @default(cuid())
  name       String
  imageUrl   String
  gearType   String
  gearEffect String
}

model Collection {
  id          String     @id @default(cuid())
  character   Character? @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String?
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  relic       HolyRelic? @relation(fields: [relicId], references: [id], onDelete: Cascade)
  relicId     String?
  createdAt   DateTime   @default(now())

  @@unique([userId, characterId])
  @@unique([userId, relicId])
  @@map("Collection")
}

model Comment {
  id          String    @id @default(cuid())
  comment     String
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  characterId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())

  @@map("comments")
}

enum AchievementType {
  COMMENT
  LOGIN
  EMAIL_VERIFIED
  COLLECTION
  TWO_FA_ADDED
  GENERAL
  REGISTERED
}

enum AchievementCategory {
  SOCIAL
  EXPLORATION
  PROGRESS
  COLLECTIBLES
}

model Achievement {
  id           String              @id @default(cuid())
  name         String              @unique
  description  String
  imageUrl     String
  targetValue  Int?
  targetBool   Boolean?
  type         AchievementType
  category     AchievementCategory
  userProgress UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  progress      Int         @default(0)
  unlocked      Boolean     @default(false)
  favourited    Boolean?    @default(false)
  unlockedAt    DateTime?

  @@unique([userId, achievementId])
}

model FriendshipLevel {
  id               String                      @id @default(cuid())
  level            Int                         @unique
  requiredAffinity Int
  rewardType       FriendshipRewardType
  characterRewards CharacterFriendshipReward[]

  @@map("friendship_levels")
}

model CharacterFriendshipReward {
  id                String  @id @default(cuid())
  characterId       String
  friendshipLevelId String
  artworkUrl        String?
  motionUrl         String?
  voiceLineText     String?
  voiceLineAudioUrl String?
  diamondAmount     Int?    @default(1)
  cosmeticUrl       String?
  cosmeticName      String?

  character       Character       @relation(fields: [characterId], references: [id], onDelete: Cascade)
  friendshipLevel FriendshipLevel @relation(fields: [friendshipLevelId], references: [id], onDelete: Cascade)

  @@unique([characterId, friendshipLevelId])
  @@map("character_friendship_rewards")
}
